// Supports prompt, sampler, negative prompt, batch size, steps, height, width, seed

import {
  SlashCommandBuilder,
  AttachmentBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} from "discord.js";
import { getApiUrl, storeEmbedData } from "../../globals.js";
import {
  createEmbedFromResponse,
  sanitizeUrl,
  getBase64EncodedImageData,
} from "../../utils.js";

const data = new SlashCommandBuilder()
  .setName("img2img")
  .setDescription(`Generate a image (API MUST BE SET AND ACTIVE).`)
  .addStringOption((option) =>
    option.setName("prompt").setDescription("The prompt").setRequired(true)
  )
  .addStringOption((option) =>
    option
      .setName("url")
      .setDescription("Url of image you want to img2img")
      .setRequired(true)
  )
  .addNumberOption((option) =>
    option
      .setName("denoisingstrength")
      .setDescription("How similar you want the image to look")
      .setRequired(false)
  )
  .addNumberOption((option) =>
    option
      .setName("batchsize")
      .setDescription("Number of images to generate. Default is 1")
  )
  .addNumberOption((option) =>
    option.setName("height").setDescription("Height of image")
  )
  .addNumberOption((option) =>
    option.setName("width").setDescription("Width of image")
  )
  .addNumberOption((option) =>
    option
      .setName("steps")
      .setDescription("Number of steps you want. Default is 20")
  )
  .addNumberOption((option) =>
    option
      .setName("seed")
      .setDescription("Set the image seed. Randomly generated by default")
  )
  .addStringOption((option) =>
    option
      .setName("negativeprompt")
      .setDescription("What you don't want to see")
      .setRequired(false)
  )
  .addStringOption((option) =>
    option
      .setName("sampler")
      .setDescription("The sampler to use. Default is Euler")
      // TODO: Grab choices dynamically through /sdapi/samplers
      .addChoices(
        { name: "Euler a", value: "Euler a" },
        { name: "Euler", value: "Euler" },
        { name: "LMS", value: "LMS" },
        { name: "Heun", value: "Heun" },
        { name: "DPM2", value: "DPM2" },
        { name: "DPM2 a", value: "DPM2 a" },
        { name: "DPM++ 2S a", value: "DPM++ 2S a" },
        { name: "DPM++ 2M", value: "DPM++ 2M" },
        { name: "DPM++ SDE", value: "DPM++ SDE" },
        { name: "DPM fast", value: "DPM fast" },
        { name: "DPM adaptive", value: "DPM adaptive" },
        { name: "LMS Karras", value: "LMS Karras" },
        { name: "DPM2 Karras", value: "DPM2 Karras" },
        { name: "DPM2 a Karras", value: "DPM2 a Karras" },
        { name: "DPM++ 2S a Karras", value: "DPM++ 2S a Karras" },
        { name: "DPM++ 2M Karras", value: "DPM++ 2M Karras" },
        { name: "DPM++ SDE Karras", value: "DPM++ SDE Karras" }
      )
  );

// TODO: Check for valid api before trying to send api request
// TODO: Add update progress
async function execute(interaction) {
  try {
    // Wait before timeout
    await interaction.deferReply({ fetchReply: true });

    // Get values from command, set default values if options are not entered
    let prompt = interaction.options.getString("prompt");
    let url =
      sanitizeUrl(interaction.options.getString("url"), false) ||
      "http://cdn.akc.org/content/article-body-image/samoyed_puppy_dog_pictures.jpg"; // TODO: error handling
    let sampler = interaction.options.getString("sampler") || "Euler";
    let negativePrompt = interaction.options.getString("negativeprompt") || "";
    let denoisingstrength =
      interaction.options.getNumber("denoisingstrength") || 0.75;
    let batchSize = interaction.options.getNumber("batchsize") || 1;
    let steps = interaction.options.getNumber("steps") || 20;
    let height = interaction.options.getNumber("height") || 512;
    let width = interaction.options.getNumber("width") || 512;
    let seed = interaction.options.getNumber("seed") || -1;

    // Convert image from url into base64 encoded data
    let image;
    try {
      image = await getBase64EncodedImageData(url);
    } catch (error) {
      console.error("Failed to get base64");
      return;
    }

    // Construct the payload to send to the API
    let payload = {
      prompt: prompt,
      init_images: [image],
      denoising_strength: denoisingstrength,
      width: width,
      height: height,
      steps: steps,
      seed: seed,
      negative_prompt: negativePrompt,
      sampler_name: sampler,
      batch_size: batchSize,
    };

    // Get endpoint
    let endpoint = "sdapi/v1/img2img";

    // Send the payload to the API
    let response = await fetch(getApiUrl() + endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    // Extract the generated image and info from the response
    let data = await response.json();
    let imagesData = data.images;

    if (imagesData) {
      const files = [];

      for (const imageData of imagesData) {
        // Convert the base64 string to a buffer
        const buffer = Buffer.from(imageData, "base64");

        // Create a file attachment using the buffer
        const file = new AttachmentBuilder(buffer);
        files.push(file);
      }

      // Create fields to add into embed
      const embed = createEmbedFromResponse(data, "img2img");

      // Store embed incase requested later
      const embedDataKey = `get_image_generation_data:${interaction.id}`; // Use interaction ID as a unique identifier
      storeEmbedData(embedDataKey, embed);

      // Create the button and action row for the "get image generation data" button
      const getGenerationDataButton = new ButtonBuilder()
        .setCustomId(`get_image_generation_data:${embedDataKey}`)
        .setLabel("Get Image Generation Data")
        .setStyle(ButtonStyle.Primary);

      const actionRow = new ActionRowBuilder().addComponents(
        getGenerationDataButton
      );

      // Reply with the embed and the file attachment
      await interaction.editReply({
        // embeds: [embed],
        files: files,
        components: [actionRow],
      });
      return true;
    }
  } catch (error) {
    // Image response/generation error
    console.error(error);
    await interaction.editReply({
      content:
        "Something went wrong while generating the image. Please try again later.",
      ephemeral: true,
    });
    return false;
  }
}

export default {
  data,
  execute,
};
